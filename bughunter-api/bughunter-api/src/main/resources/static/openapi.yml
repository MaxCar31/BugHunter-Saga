openapi: 3.0.3
info:
  title: BugHunter Saga API
  description: |-
    API (Contrato Primero) para la plataforma gamificada BugHunter Saga.
    Diseñada para soportar la implementación del frontend en Next.js
    y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
  version: 1.0.0
servers:
  - url: /api
    description: Servidor de API (prefijo base)

tags:
  - name: Auth
    description:  Autenticación, registro y recuperación de cuentas.
  - name: Content
    description:  Carga de módulos, unidades, lecciones y problemas.
  - name: User
    description: Gestión del perfil, configuraciones y estadísticas del usuario.
  - name: Progress
    description: Registro del progreso de lecciones y recompensas.
  - name: Gamification
    description:  Endpoints para la tienda (shop) y la tabla de clasificación (leaderboard).

# ===============================================================
# Paths (Endpoints)
# ===============================================================

paths:
  # --- 1. TAG: Auth ---
  # Requerido por: pages/index.tsx, pages/forgot-password.tsx, components/LoginScreen.tsx

  /auth/register:
    post:
      tags: [Auth]
      summary: Registrar un nuevo usuario
      description: Crea una nueva cuenta de usuario y su perfil inicial.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDTO'
      responses:
        '201':
          description: Usuario registrado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'

  /auth/login:
    post:
      tags: [Auth]
      summary: Iniciar sesión
      description: Autentica al usuario y devuelve un token de acceso e información básica.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDTO'
      responses:
        '200':
          description: Inicio de sesión exitoso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Recuperación de contraseña (placeholder)
      description: Inicia el flujo de recuperación de contraseña (lógica a implementar).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Instrucciones enviadas (si el email existe).

  # --- 2. TAG: Content ---
  # Requerido por: pages/register.tsx, pages/learn.tsx, pages/lesson.tsx, stores/createModuleStore.ts, stores/createQuestionsSlice.ts

  /content/modules:
    get:
      tags: [Content]
      summary: Obtener todos los módulos
      description: Devuelve la lista de todos los módulos disponibles para que el usuario elija en `pages/register.tsx`.
      responses:
        '200':
          description: Lista de módulos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuleSummaryDTO'

  /content/modules/{moduleCode}/unit:
    get:
      tags: [Content]
      summary: Obtener la unidad activa para un módulo
      description: |-
        Devuelve la estructura de la unidad actual para un módulo (basado en `utils/units.ts`, que muestra una unidad por módulo).
        Incluye la lista de 'tiles' (lecciones) para renderizar en `pages/learn.tsx`.
      security:
        - bearerAuth: []
      parameters:
        - name: moduleCode
          in: path
          required: true
          schema:
            type: string
            example: "moduleA"
      responses:
        '200':
          description: Detalles de la unidad y sus 'tiles' (lecciones).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDetailDTO'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '404':
          $ref: '#/components/responses/ErrorNotFound'

  /content/modules/{moduleCode}/problems:
    get:
      tags: [Content]
      summary: Obtener todos los problemas/preguntas de un módulo
      description: |-
        Reemplaza la carga de archivos estáticos en `stores/createQuestionsSlice.ts`.
        Devuelve *toda* la lista de problemas (incluyendo 'INFO', 'MULTIPLE_CHOICE', etc.) para un módulo,
        que `pages/lesson.tsx` consumirá.
      security:
        - bearerAuth: []
      parameters:
        - name: moduleCode
          in: path
          required: true
          schema:
            type: string
            example: "moduleB"
      responses:
        '200':
          description: Lista de todos los problemas/preguntas para ese módulo.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProblemDTO'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '404':
          $ref: '#/components/responses/ErrorNotFound'

  # --- 3. TAG: User ---
  # Requerido por: pages/profile.tsx, pages/settings/account.tsx, pages/settings/coach.tsx, pages/settings/sound.tsx, components/RightBar.tsx

  /users/me/profile:
    get:
      tags: [User]
      summary: Obtener el perfil completo del usuario
      description: Devuelve toda la información del usuario autenticado, incluyendo datos personales y configuraciones.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil completo del usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'

  /users/me/account:
    put:
      tags: [User]
      summary: Actualizar datos de la cuenta (nombre/username)
      description: Usado por `pages/settings/account.tsx` para guardar cambios.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccountUpdateDTO'
      responses:
        '200':
          description: Cuenta actualizada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoDTO'
        '400':
          $ref: '#/components/responses/ErrorBadRequest' # e.g., username ya existe
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'

  /users/me/settings:
    put:
      tags: [User]
      summary: Actualizar configuraciones del usuario (meta, sonido)
      description: Usado por `pages/settings/coach.tsx` y `pages/settings/sound.tsx`.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsUpdateDTO'
      responses:
        '200':
          description: Configuraciones actualizadas.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'

  /users/me/stats:
    get:
      tags: [User]
      summary: Obtener estadísticas de gamificación del usuario
      description: Endpoint optimizado para `RightBar.tsx` y `TopBar.tsx`, proporciona todos los datos dinámicos.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Estadísticas del usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatsDTO'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'

  # --- 4. TAG: Progress ---
  # Requerido por: pages/lesson.tsx (LessonComplete), pages/learn.tsx (Treasure)

  /progress/lesson:
    post:
      tags: [Progress]
      summary: Registrar finalización de una lección
      description: |-
        Se llama desde `LessonComplete` en `lesson.tsx`.
        El backend debe:
        1. Registrar la lección en `user_lesson_progress`.
        2. Calcular y registrar el XP en `user_xp_history`.
        3. Calcular y actualizar la racha en `user_streaks`.
        4. Otorga lingots/Puntos QA (si no es práctica) y actualizar `user_profiles`.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonResultDTO'
      responses:
        '200':
          description: Progreso guardado, devuelve recompensas.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonCompletionResponseDTO'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'

  /progress/treasure/{lessonId}:
    post:
      tags: [Progress]
      summary: Reclamar un cofre de tesoro
      description: Se llama desde `pages/learn.tsx` al hacer clic en un cofre activo. El backend otorga lingots/Puntos QA.
      security:
        - bearerAuth: []
      parameters:
        - name: lessonId
          in: path
          required: true
          description: ID de la lección (o tile) que representa el tesoro.
          schema:
            type: integer
      responses:
        '200':
          description: Recompensa reclamada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  lingotsEarned:
                    type: integer
                  totalLingots:
                    type: integer
        '400':
          description: Tesoro ya reclamado o no desbloqueado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'

  # --- 5. TAG: Gamification ---
  # Requerido por: pages/leaderboard.tsx, pages/shop.tsx

  /leaderboard:
    get:
      tags: [Gamification]
      summary: Obtener la tabla de clasificación
      description: Devuelve la tabla de clasificación de la liga actual del usuario para `pages/leaderboard.tsx`.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Tabla de clasificación semanal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardDTO'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          description: El usuario aún no ha desbloqueado las clasificaciones.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /shop/items:
    get:
      tags: [Gamification]
      summary: Obtener los artículos de la tienda
      description: Devuelve los artículos disponibles en `pages/shop.tsx`.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de artículos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShopItemDTO'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'

  /shop/purchase/{itemId}:
    post:
      tags: [Gamification]
      summary: Comprar un artículo de la tienda
      description: Permite al usuario comprar un artículo (ej. 'streak-freeze') usando 'lingots'.
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string # o integer, según cómo identifiques tus artículos
            example: "streak-freeze"
      responses:
        '200':
          description: Compra exitosa. Devuelve el estado actualizado del perfil/inventario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatsDTO' # Devuelve stats actualizados
        '400':
          description: Fondos (lingots) insuficientes o artículo no válido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'

# ===============================================================
# Components (Schemas, DTOs & Reusable Responses)
# ===============================================================

components:
  # --- Security ---
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # --- Reusable Responses ---
  responses:
    ErrorBadRequest:
      description: Solicitud inválida (e.g., falta un campo, email inválido, username ya existe).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    ErrorUnauthorized:
      description: No autenticado (token no provisto o inválido).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    ErrorNotFound:
      description: Recurso no encontrado.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'

  # --- DTO Schemas (Data Transfer Objects) ---
  schemas:
    UserRegistrationDTO:
      type: object
      required: [username, name, email, password]
      properties:
        username:
          type: string
          example: "max.carrion"
        name:
          type: string
          example: "Max Carrión"
        email:
          type: string
          format: email
          example: "max.carrion@epn.edu.ec"
        password:
          type: string
          format: password
          minLength: 8

    UserLoginDTO:
      type: object
      required: [emailOrUsername, password]
      properties:
        emailOrUsername:
          type: string
          example: "max.carrion"
        password:
          type: string
          format: password

    AuthResponseDTO:
      type: object
      properties:
        token:
          type: string
          description: Token de acceso (JWT)
        user:
          $ref: '#/components/schemas/UserInfoDTO'

    UserInfoDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        name:
          type: string
        email:
          type: string
          format: email

    UserProfileDTO:
      type: object
      description: Perfil completo del usuario (datos personales y configuraciones)
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        joinedAt:
          type: string
          format: date-time
        lingots:
          type: integer
          description: "Puntos QA"
        dailyXpGoal:
          type: integer
        soundEffectsEnabled:
          type: boolean
        # ... otros campos de settings ...

    UserAccountUpdateDTO:
      type: object
      description: Campos para actualizar en `settings/account.tsx`
      properties:
        name:
          type: string
          maxLength: 100
        username:
          type: string
          minLength: 3
          maxLength: 50

    UserSettingsUpdateDTO:
      type: object
      description: Campos para actualizar en `settings/coach.tsx` y `settings/sound.tsx`
      properties:
        dailyXpGoal:
          type: integer
          enum: [1, 10, 20, 30, 50]
        soundEffectsEnabled:
          type: boolean
        speakingExercises: # Asumiendo que se guarda en DB, aunque no está en tu schema
          type: boolean
        listeningExercises: # Asumiendo que se guarda en DB, aunque no está en tu schema
          type: boolean

    UserStatsDTO:
      type: object
      description: Datos dinámicos de gamificación para el UI (RightBar, TopBar)
      properties:
        totalXp:
          type: integer
        totalLingots:
          type: integer
        currentStreak:
          type: integer
        xpToday:
          type: integer
        xpThisWeek:
          type: integer
        leagueRank:
          type: integer
          nullable: true
        activeDays:
          type: array
          items:
            type: string
            format: date
            example: "2025-10-20"

    ModuleSummaryDTO:
      type: object
      description: Información básica del módulo
      properties:
        id:
          type: integer
        code:
          type: string
          example: "moduleA"
        name:
          type: string
        shortName:
          type: string
        description:
          type: string
        uiConfig:
          type: object
          additionalProperties: true
          example: {"backgroundColor": "bg-[#58cc02]", "borderColor": "border-[#46a302]"}

    UnitDetailDTO:
      type: object
      description: Detalles de una unidad, incluyendo sus 'tiles' (lecciones)
      properties:
        unitNumber:
          type: integer
        description:
          type: string
        backgroundColor:
          type: string
        textColor:
          type: string
        borderColor:
          type: string
        tiles:
          type: array
          items:
            $ref: '#/components/schemas/LessonTileDTO'

    LessonTileDTO:
      type: object
      description: Representa un 'tile' (lección) en la UI de `learn.tsx`
      properties:
        lessonId:
          type: integer # El ID de la lección real
        type:
          type: string
          enum: [star, book, dumbbell, trophy, fast-forward, treasure]
        description:
          type: string
        status:
          type: string
          enum: [LOCKED, ACTIVE, COMPLETE]
          description: (Calculado por el backend basado en el progreso del usuario)

    ProblemDTO:
      type: object
      description: Una única pregunta o pieza de contenido dentro de una lección
      properties:
        type:
          type: string
          enum: [INFO, MULTIPLE_CHOICE, FILL_IN_THE_BLANK]
        # Para INFO
        moduleTitle:
          type: string
          nullable: true
        introduction:
          type: string
          nullable: true
        objectives:
          type: array
          items:
            type: string
          nullable: true
        # Para MULTIPLE_CHOICE
        question:
          type: string
          nullable: true
        answers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              # 'icon' es del frontend, no necesita venir del backend
          nullable: true
        correctAnswer:
          type: integer # Para MULTIPLE_CHOICE
          nullable: true
        # Para FILL_IN_THE_BLANK
        # 'question' ya está definido
        answerTiles:
          type: array
          items:
            type: string
          nullable: true
        correctAnswerIndices: # Renombrado para claridad
          type: array
          items:
            type: integer
          nullable: true

    LessonResultDTO:
      type: object
      description: Datos enviados al completar una lección
      properties:
        lessonId:
          type: integer
        correctAnswerCount:
          type: integer
        incorrectAnswerCount:
          type: integer
        timeTakenMs:
          type: integer
        isPractice:
          type: boolean

    LessonCompletionResponseDTO:
      type: object
      description: Respuesta del backend al completar una lección
      properties:
        xpEarned:
          type: integer
        lingotsEarned:
          type: integer
        newTotalLingots:
          type: integer
        newStreak:
          type: integer

    LeaderboardDTO:
      type: object
      properties:
        leagueName:
          type: string
          example: "Liga Bronce"
        timeUntilEnd:
          type: string
          example: "2 días restantes"
        users:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardEntryDTO'

    LeaderboardEntryDTO:
      type: object
      properties:
        rank:
          type: integer
        name:
          type: string
        xp:
          type: integer
        isCurrentUser:
          type: boolean

    ShopItemDTO:
      type: object
      properties:
        itemId:
          type: string
          example: "streak-freeze"
        name:
          type: string
          example: "Congelador de Racha"
        description:
          type: string
        cost:
          type: integer
          example: 10

    ErrorDTO:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string