/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Diseñada para soportar la implementación del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Datos dinámicos de gamificación para el UI (RightBar, TopBar)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T23:30:11.610365800-05:00[America/Guayaquil]", comments = "Generator version: 7.7.0")
public class UserStatsDTO {
  public static final String SERIALIZED_NAME_TOTAL_XP = "totalXp";
  @SerializedName(SERIALIZED_NAME_TOTAL_XP)
  private Integer totalXp;

  public static final String SERIALIZED_NAME_TOTAL_LINGOTS = "totalLingots";
  @SerializedName(SERIALIZED_NAME_TOTAL_LINGOTS)
  private Integer totalLingots;

  public static final String SERIALIZED_NAME_CURRENT_STREAK = "currentStreak";
  @SerializedName(SERIALIZED_NAME_CURRENT_STREAK)
  private Integer currentStreak;

  public static final String SERIALIZED_NAME_XP_TODAY = "xpToday";
  @SerializedName(SERIALIZED_NAME_XP_TODAY)
  private Integer xpToday;

  public static final String SERIALIZED_NAME_XP_THIS_WEEK = "xpThisWeek";
  @SerializedName(SERIALIZED_NAME_XP_THIS_WEEK)
  private Integer xpThisWeek;

  public static final String SERIALIZED_NAME_LEAGUE_RANK = "leagueRank";
  @SerializedName(SERIALIZED_NAME_LEAGUE_RANK)
  private Integer leagueRank;

  public static final String SERIALIZED_NAME_ACTIVE_DAYS = "activeDays";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DAYS)
  private List<LocalDate> activeDays = new ArrayList<>();

  public UserStatsDTO() {
  }

  public UserStatsDTO totalXp(Integer totalXp) {
    this.totalXp = totalXp;
    return this;
  }

  /**
   * Get totalXp
   * @return totalXp
   */
  @javax.annotation.Nullable
  public Integer getTotalXp() {
    return totalXp;
  }

  public void setTotalXp(Integer totalXp) {
    this.totalXp = totalXp;
  }


  public UserStatsDTO totalLingots(Integer totalLingots) {
    this.totalLingots = totalLingots;
    return this;
  }

  /**
   * Get totalLingots
   * @return totalLingots
   */
  @javax.annotation.Nullable
  public Integer getTotalLingots() {
    return totalLingots;
  }

  public void setTotalLingots(Integer totalLingots) {
    this.totalLingots = totalLingots;
  }


  public UserStatsDTO currentStreak(Integer currentStreak) {
    this.currentStreak = currentStreak;
    return this;
  }

  /**
   * Get currentStreak
   * @return currentStreak
   */
  @javax.annotation.Nullable
  public Integer getCurrentStreak() {
    return currentStreak;
  }

  public void setCurrentStreak(Integer currentStreak) {
    this.currentStreak = currentStreak;
  }


  public UserStatsDTO xpToday(Integer xpToday) {
    this.xpToday = xpToday;
    return this;
  }

  /**
   * Get xpToday
   * @return xpToday
   */
  @javax.annotation.Nullable
  public Integer getXpToday() {
    return xpToday;
  }

  public void setXpToday(Integer xpToday) {
    this.xpToday = xpToday;
  }


  public UserStatsDTO xpThisWeek(Integer xpThisWeek) {
    this.xpThisWeek = xpThisWeek;
    return this;
  }

  /**
   * Get xpThisWeek
   * @return xpThisWeek
   */
  @javax.annotation.Nullable
  public Integer getXpThisWeek() {
    return xpThisWeek;
  }

  public void setXpThisWeek(Integer xpThisWeek) {
    this.xpThisWeek = xpThisWeek;
  }


  public UserStatsDTO leagueRank(Integer leagueRank) {
    this.leagueRank = leagueRank;
    return this;
  }

  /**
   * Get leagueRank
   * @return leagueRank
   */
  @javax.annotation.Nullable
  public Integer getLeagueRank() {
    return leagueRank;
  }

  public void setLeagueRank(Integer leagueRank) {
    this.leagueRank = leagueRank;
  }


  public UserStatsDTO activeDays(List<LocalDate> activeDays) {
    this.activeDays = activeDays;
    return this;
  }

  public UserStatsDTO addActiveDaysItem(LocalDate activeDaysItem) {
    if (this.activeDays == null) {
      this.activeDays = new ArrayList<>();
    }
    this.activeDays.add(activeDaysItem);
    return this;
  }

  /**
   * Get activeDays
   * @return activeDays
   */
  @javax.annotation.Nullable
  public List<LocalDate> getActiveDays() {
    return activeDays;
  }

  public void setActiveDays(List<LocalDate> activeDays) {
    this.activeDays = activeDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserStatsDTO userStatsDTO = (UserStatsDTO) o;
    return Objects.equals(this.totalXp, userStatsDTO.totalXp) &&
        Objects.equals(this.totalLingots, userStatsDTO.totalLingots) &&
        Objects.equals(this.currentStreak, userStatsDTO.currentStreak) &&
        Objects.equals(this.xpToday, userStatsDTO.xpToday) &&
        Objects.equals(this.xpThisWeek, userStatsDTO.xpThisWeek) &&
        Objects.equals(this.leagueRank, userStatsDTO.leagueRank) &&
        Objects.equals(this.activeDays, userStatsDTO.activeDays);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalXp, totalLingots, currentStreak, xpToday, xpThisWeek, leagueRank, activeDays);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserStatsDTO {\n");
    sb.append("    totalXp: ").append(toIndentedString(totalXp)).append("\n");
    sb.append("    totalLingots: ").append(toIndentedString(totalLingots)).append("\n");
    sb.append("    currentStreak: ").append(toIndentedString(currentStreak)).append("\n");
    sb.append("    xpToday: ").append(toIndentedString(xpToday)).append("\n");
    sb.append("    xpThisWeek: ").append(toIndentedString(xpThisWeek)).append("\n");
    sb.append("    leagueRank: ").append(toIndentedString(leagueRank)).append("\n");
    sb.append("    activeDays: ").append(toIndentedString(activeDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalXp");
    openapiFields.add("totalLingots");
    openapiFields.add("currentStreak");
    openapiFields.add("xpToday");
    openapiFields.add("xpThisWeek");
    openapiFields.add("leagueRank");
    openapiFields.add("activeDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserStatsDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserStatsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserStatsDTO is not found in the empty JSON string", UserStatsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserStatsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserStatsDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("activeDays") != null && !jsonObj.get("activeDays").isJsonNull() && !jsonObj.get("activeDays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeDays` to be an array in the JSON string but got `%s`", jsonObj.get("activeDays").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserStatsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserStatsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserStatsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserStatsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UserStatsDTO>() {
           @Override
           public void write(JsonWriter out, UserStatsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserStatsDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserStatsDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserStatsDTO
   * @throws IOException if the JSON string is invalid with respect to UserStatsDTO
   */
  public static UserStatsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserStatsDTO.class);
  }

  /**
   * Convert an instance of UserStatsDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

