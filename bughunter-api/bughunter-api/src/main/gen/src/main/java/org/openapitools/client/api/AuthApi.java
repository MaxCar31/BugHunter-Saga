/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Diseñada para soportar la implementación del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthForgotPasswordPostRequest;
import org.openapitools.client.model.AuthResponseDTO;
import org.openapitools.client.model.ErrorDTO;
import org.openapitools.client.model.UserLoginDTO;
import org.openapitools.client.model.UserRegistrationDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authForgotPasswordPost
     * @param authForgotPasswordPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instrucciones enviadas (si el email existe). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authForgotPasswordPostCall(AuthForgotPasswordPostRequest authForgotPasswordPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authForgotPasswordPostRequest;

        // create path and map variables
        String localVarPath = "/auth/forgot-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authForgotPasswordPostValidateBeforeCall(AuthForgotPasswordPostRequest authForgotPasswordPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authForgotPasswordPostRequest' is set
        if (authForgotPasswordPostRequest == null) {
            throw new ApiException("Missing the required parameter 'authForgotPasswordPostRequest' when calling authForgotPasswordPost(Async)");
        }

        return authForgotPasswordPostCall(authForgotPasswordPostRequest, _callback);

    }

    /**
     * Recuperación de contraseña (placeholder)
     * Inicia el flujo de recuperación de contraseña (lógica a implementar).
     * @param authForgotPasswordPostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instrucciones enviadas (si el email existe). </td><td>  -  </td></tr>
     </table>
     */
    public void authForgotPasswordPost(AuthForgotPasswordPostRequest authForgotPasswordPostRequest) throws ApiException {
        authForgotPasswordPostWithHttpInfo(authForgotPasswordPostRequest);
    }

    /**
     * Recuperación de contraseña (placeholder)
     * Inicia el flujo de recuperación de contraseña (lógica a implementar).
     * @param authForgotPasswordPostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instrucciones enviadas (si el email existe). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authForgotPasswordPostWithHttpInfo(AuthForgotPasswordPostRequest authForgotPasswordPostRequest) throws ApiException {
        okhttp3.Call localVarCall = authForgotPasswordPostValidateBeforeCall(authForgotPasswordPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Recuperación de contraseña (placeholder) (asynchronously)
     * Inicia el flujo de recuperación de contraseña (lógica a implementar).
     * @param authForgotPasswordPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instrucciones enviadas (si el email existe). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authForgotPasswordPostAsync(AuthForgotPasswordPostRequest authForgotPasswordPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authForgotPasswordPostValidateBeforeCall(authForgotPasswordPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authLoginPost
     * @param userLoginDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inicio de sesión exitoso. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authLoginPostCall(UserLoginDTO userLoginDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userLoginDTO;

        // create path and map variables
        String localVarPath = "/auth/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authLoginPostValidateBeforeCall(UserLoginDTO userLoginDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userLoginDTO' is set
        if (userLoginDTO == null) {
            throw new ApiException("Missing the required parameter 'userLoginDTO' when calling authLoginPost(Async)");
        }

        return authLoginPostCall(userLoginDTO, _callback);

    }

    /**
     * Iniciar sesión
     * Autentica al usuario y devuelve un token de acceso e información básica.
     * @param userLoginDTO  (required)
     * @return AuthResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inicio de sesión exitoso. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponseDTO authLoginPost(UserLoginDTO userLoginDTO) throws ApiException {
        ApiResponse<AuthResponseDTO> localVarResp = authLoginPostWithHttpInfo(userLoginDTO);
        return localVarResp.getData();
    }

    /**
     * Iniciar sesión
     * Autentica al usuario y devuelve un token de acceso e información básica.
     * @param userLoginDTO  (required)
     * @return ApiResponse&lt;AuthResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inicio de sesión exitoso. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponseDTO> authLoginPostWithHttpInfo(UserLoginDTO userLoginDTO) throws ApiException {
        okhttp3.Call localVarCall = authLoginPostValidateBeforeCall(userLoginDTO, null);
        Type localVarReturnType = new TypeToken<AuthResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Iniciar sesión (asynchronously)
     * Autentica al usuario y devuelve un token de acceso e información básica.
     * @param userLoginDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inicio de sesión exitoso. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authLoginPostAsync(UserLoginDTO userLoginDTO, final ApiCallback<AuthResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = authLoginPostValidateBeforeCall(userLoginDTO, _callback);
        Type localVarReturnType = new TypeToken<AuthResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authRegisterPost
     * @param userRegistrationDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Usuario registrado exitosamente. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authRegisterPostCall(UserRegistrationDTO userRegistrationDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userRegistrationDTO;

        // create path and map variables
        String localVarPath = "/auth/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authRegisterPostValidateBeforeCall(UserRegistrationDTO userRegistrationDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userRegistrationDTO' is set
        if (userRegistrationDTO == null) {
            throw new ApiException("Missing the required parameter 'userRegistrationDTO' when calling authRegisterPost(Async)");
        }

        return authRegisterPostCall(userRegistrationDTO, _callback);

    }

    /**
     * Registrar un nuevo usuario
     * Crea una nueva cuenta de usuario y su perfil inicial.
     * @param userRegistrationDTO  (required)
     * @return AuthResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Usuario registrado exitosamente. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponseDTO authRegisterPost(UserRegistrationDTO userRegistrationDTO) throws ApiException {
        ApiResponse<AuthResponseDTO> localVarResp = authRegisterPostWithHttpInfo(userRegistrationDTO);
        return localVarResp.getData();
    }

    /**
     * Registrar un nuevo usuario
     * Crea una nueva cuenta de usuario y su perfil inicial.
     * @param userRegistrationDTO  (required)
     * @return ApiResponse&lt;AuthResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Usuario registrado exitosamente. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponseDTO> authRegisterPostWithHttpInfo(UserRegistrationDTO userRegistrationDTO) throws ApiException {
        okhttp3.Call localVarCall = authRegisterPostValidateBeforeCall(userRegistrationDTO, null);
        Type localVarReturnType = new TypeToken<AuthResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Registrar un nuevo usuario (asynchronously)
     * Crea una nueva cuenta de usuario y su perfil inicial.
     * @param userRegistrationDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Usuario registrado exitosamente. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authRegisterPostAsync(UserRegistrationDTO userRegistrationDTO, final ApiCallback<AuthResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = authRegisterPostValidateBeforeCall(userRegistrationDTO, _callback);
        Type localVarReturnType = new TypeToken<AuthResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
