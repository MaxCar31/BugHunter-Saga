/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Diseñada para soportar la implementación del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Perfil completo del usuario (datos personales y configuraciones)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T23:30:11.610365800-05:00[America/Guayaquil]", comments = "Generator version: 7.7.0")
public class UserProfileDTO {
  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_JOINED_AT = "joinedAt";
  @SerializedName(SERIALIZED_NAME_JOINED_AT)
  private OffsetDateTime joinedAt;

  public static final String SERIALIZED_NAME_LINGOTS = "lingots";
  @SerializedName(SERIALIZED_NAME_LINGOTS)
  private Integer lingots;

  public static final String SERIALIZED_NAME_DAILY_XP_GOAL = "dailyXpGoal";
  @SerializedName(SERIALIZED_NAME_DAILY_XP_GOAL)
  private Integer dailyXpGoal;

  public static final String SERIALIZED_NAME_SOUND_EFFECTS_ENABLED = "soundEffectsEnabled";
  @SerializedName(SERIALIZED_NAME_SOUND_EFFECTS_ENABLED)
  private Boolean soundEffectsEnabled;

  public UserProfileDTO() {
  }

  public UserProfileDTO userId(UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public UserProfileDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserProfileDTO username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public UserProfileDTO email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserProfileDTO joinedAt(OffsetDateTime joinedAt) {
    this.joinedAt = joinedAt;
    return this;
  }

  /**
   * Get joinedAt
   * @return joinedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getJoinedAt() {
    return joinedAt;
  }

  public void setJoinedAt(OffsetDateTime joinedAt) {
    this.joinedAt = joinedAt;
  }


  public UserProfileDTO lingots(Integer lingots) {
    this.lingots = lingots;
    return this;
  }

  /**
   * Puntos QA
   * @return lingots
   */
  @javax.annotation.Nullable
  public Integer getLingots() {
    return lingots;
  }

  public void setLingots(Integer lingots) {
    this.lingots = lingots;
  }


  public UserProfileDTO dailyXpGoal(Integer dailyXpGoal) {
    this.dailyXpGoal = dailyXpGoal;
    return this;
  }

  /**
   * Get dailyXpGoal
   * @return dailyXpGoal
   */
  @javax.annotation.Nullable
  public Integer getDailyXpGoal() {
    return dailyXpGoal;
  }

  public void setDailyXpGoal(Integer dailyXpGoal) {
    this.dailyXpGoal = dailyXpGoal;
  }


  public UserProfileDTO soundEffectsEnabled(Boolean soundEffectsEnabled) {
    this.soundEffectsEnabled = soundEffectsEnabled;
    return this;
  }

  /**
   * Get soundEffectsEnabled
   * @return soundEffectsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSoundEffectsEnabled() {
    return soundEffectsEnabled;
  }

  public void setSoundEffectsEnabled(Boolean soundEffectsEnabled) {
    this.soundEffectsEnabled = soundEffectsEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserProfileDTO userProfileDTO = (UserProfileDTO) o;
    return Objects.equals(this.userId, userProfileDTO.userId) &&
        Objects.equals(this.name, userProfileDTO.name) &&
        Objects.equals(this.username, userProfileDTO.username) &&
        Objects.equals(this.email, userProfileDTO.email) &&
        Objects.equals(this.joinedAt, userProfileDTO.joinedAt) &&
        Objects.equals(this.lingots, userProfileDTO.lingots) &&
        Objects.equals(this.dailyXpGoal, userProfileDTO.dailyXpGoal) &&
        Objects.equals(this.soundEffectsEnabled, userProfileDTO.soundEffectsEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, name, username, email, joinedAt, lingots, dailyXpGoal, soundEffectsEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserProfileDTO {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    joinedAt: ").append(toIndentedString(joinedAt)).append("\n");
    sb.append("    lingots: ").append(toIndentedString(lingots)).append("\n");
    sb.append("    dailyXpGoal: ").append(toIndentedString(dailyXpGoal)).append("\n");
    sb.append("    soundEffectsEnabled: ").append(toIndentedString(soundEffectsEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userId");
    openapiFields.add("name");
    openapiFields.add("username");
    openapiFields.add("email");
    openapiFields.add("joinedAt");
    openapiFields.add("lingots");
    openapiFields.add("dailyXpGoal");
    openapiFields.add("soundEffectsEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserProfileDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserProfileDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserProfileDTO is not found in the empty JSON string", UserProfileDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserProfileDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserProfileDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserProfileDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserProfileDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserProfileDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserProfileDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UserProfileDTO>() {
           @Override
           public void write(JsonWriter out, UserProfileDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserProfileDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserProfileDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserProfileDTO
   * @throws IOException if the JSON string is invalid with respect to UserProfileDTO
   */
  public static UserProfileDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserProfileDTO.class);
  }

  /**
   * Convert an instance of UserProfileDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

