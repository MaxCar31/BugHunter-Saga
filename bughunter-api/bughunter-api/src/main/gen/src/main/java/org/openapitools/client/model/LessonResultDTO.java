/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Dise침ada para soportar la implementaci칩n del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carri칩n.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Datos enviados al completar una lecci칩n
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T23:30:11.610365800-05:00[America/Guayaquil]", comments = "Generator version: 7.7.0")
public class LessonResultDTO {
  public static final String SERIALIZED_NAME_LESSON_ID = "lessonId";
  @SerializedName(SERIALIZED_NAME_LESSON_ID)
  private Integer lessonId;

  public static final String SERIALIZED_NAME_CORRECT_ANSWER_COUNT = "correctAnswerCount";
  @SerializedName(SERIALIZED_NAME_CORRECT_ANSWER_COUNT)
  private Integer correctAnswerCount;

  public static final String SERIALIZED_NAME_INCORRECT_ANSWER_COUNT = "incorrectAnswerCount";
  @SerializedName(SERIALIZED_NAME_INCORRECT_ANSWER_COUNT)
  private Integer incorrectAnswerCount;

  public static final String SERIALIZED_NAME_TIME_TAKEN_MS = "timeTakenMs";
  @SerializedName(SERIALIZED_NAME_TIME_TAKEN_MS)
  private Integer timeTakenMs;

  public static final String SERIALIZED_NAME_IS_PRACTICE = "isPractice";
  @SerializedName(SERIALIZED_NAME_IS_PRACTICE)
  private Boolean isPractice;

  public LessonResultDTO() {
  }

  public LessonResultDTO lessonId(Integer lessonId) {
    this.lessonId = lessonId;
    return this;
  }

  /**
   * Get lessonId
   * @return lessonId
   */
  @javax.annotation.Nullable
  public Integer getLessonId() {
    return lessonId;
  }

  public void setLessonId(Integer lessonId) {
    this.lessonId = lessonId;
  }


  public LessonResultDTO correctAnswerCount(Integer correctAnswerCount) {
    this.correctAnswerCount = correctAnswerCount;
    return this;
  }

  /**
   * Get correctAnswerCount
   * @return correctAnswerCount
   */
  @javax.annotation.Nullable
  public Integer getCorrectAnswerCount() {
    return correctAnswerCount;
  }

  public void setCorrectAnswerCount(Integer correctAnswerCount) {
    this.correctAnswerCount = correctAnswerCount;
  }


  public LessonResultDTO incorrectAnswerCount(Integer incorrectAnswerCount) {
    this.incorrectAnswerCount = incorrectAnswerCount;
    return this;
  }

  /**
   * Get incorrectAnswerCount
   * @return incorrectAnswerCount
   */
  @javax.annotation.Nullable
  public Integer getIncorrectAnswerCount() {
    return incorrectAnswerCount;
  }

  public void setIncorrectAnswerCount(Integer incorrectAnswerCount) {
    this.incorrectAnswerCount = incorrectAnswerCount;
  }


  public LessonResultDTO timeTakenMs(Integer timeTakenMs) {
    this.timeTakenMs = timeTakenMs;
    return this;
  }

  /**
   * Get timeTakenMs
   * @return timeTakenMs
   */
  @javax.annotation.Nullable
  public Integer getTimeTakenMs() {
    return timeTakenMs;
  }

  public void setTimeTakenMs(Integer timeTakenMs) {
    this.timeTakenMs = timeTakenMs;
  }


  public LessonResultDTO isPractice(Boolean isPractice) {
    this.isPractice = isPractice;
    return this;
  }

  /**
   * Get isPractice
   * @return isPractice
   */
  @javax.annotation.Nullable
  public Boolean getIsPractice() {
    return isPractice;
  }

  public void setIsPractice(Boolean isPractice) {
    this.isPractice = isPractice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LessonResultDTO lessonResultDTO = (LessonResultDTO) o;
    return Objects.equals(this.lessonId, lessonResultDTO.lessonId) &&
        Objects.equals(this.correctAnswerCount, lessonResultDTO.correctAnswerCount) &&
        Objects.equals(this.incorrectAnswerCount, lessonResultDTO.incorrectAnswerCount) &&
        Objects.equals(this.timeTakenMs, lessonResultDTO.timeTakenMs) &&
        Objects.equals(this.isPractice, lessonResultDTO.isPractice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lessonId, correctAnswerCount, incorrectAnswerCount, timeTakenMs, isPractice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LessonResultDTO {\n");
    sb.append("    lessonId: ").append(toIndentedString(lessonId)).append("\n");
    sb.append("    correctAnswerCount: ").append(toIndentedString(correctAnswerCount)).append("\n");
    sb.append("    incorrectAnswerCount: ").append(toIndentedString(incorrectAnswerCount)).append("\n");
    sb.append("    timeTakenMs: ").append(toIndentedString(timeTakenMs)).append("\n");
    sb.append("    isPractice: ").append(toIndentedString(isPractice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lessonId");
    openapiFields.add("correctAnswerCount");
    openapiFields.add("incorrectAnswerCount");
    openapiFields.add("timeTakenMs");
    openapiFields.add("isPractice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LessonResultDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LessonResultDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LessonResultDTO is not found in the empty JSON string", LessonResultDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LessonResultDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LessonResultDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LessonResultDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LessonResultDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LessonResultDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LessonResultDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<LessonResultDTO>() {
           @Override
           public void write(JsonWriter out, LessonResultDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LessonResultDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LessonResultDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LessonResultDTO
   * @throws IOException if the JSON string is invalid with respect to LessonResultDTO
   */
  public static LessonResultDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LessonResultDTO.class);
  }

  /**
   * Convert an instance of LessonResultDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

