/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Diseñada para soportar la implementación del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorDTO;
import org.openapitools.client.model.ModuleSummaryDTO;
import org.openapitools.client.model.ProblemDTO;
import org.openapitools.client.model.UnitDetailDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contentModulesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de módulos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentModulesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/modules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentModulesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return contentModulesGetCall(_callback);

    }

    /**
     * Obtener todos los módulos
     * Devuelve la lista de todos los módulos disponibles para que el usuario elija en &#x60;pages/register.tsx&#x60;.
     * @return List&lt;ModuleSummaryDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de módulos. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModuleSummaryDTO> contentModulesGet() throws ApiException {
        ApiResponse<List<ModuleSummaryDTO>> localVarResp = contentModulesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener todos los módulos
     * Devuelve la lista de todos los módulos disponibles para que el usuario elija en &#x60;pages/register.tsx&#x60;.
     * @return ApiResponse&lt;List&lt;ModuleSummaryDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de módulos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModuleSummaryDTO>> contentModulesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = contentModulesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ModuleSummaryDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener todos los módulos (asynchronously)
     * Devuelve la lista de todos los módulos disponibles para que el usuario elija en &#x60;pages/register.tsx&#x60;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de módulos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentModulesGetAsync(final ApiCallback<List<ModuleSummaryDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentModulesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ModuleSummaryDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentModulesModuleCodeProblemsGet
     * @param moduleCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los problemas/preguntas para ese módulo. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurso no encontrado. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentModulesModuleCodeProblemsGetCall(String moduleCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/modules/{moduleCode}/problems"
            .replace("{" + "moduleCode" + "}", localVarApiClient.escapeString(moduleCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentModulesModuleCodeProblemsGetValidateBeforeCall(String moduleCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleCode' is set
        if (moduleCode == null) {
            throw new ApiException("Missing the required parameter 'moduleCode' when calling contentModulesModuleCodeProblemsGet(Async)");
        }

        return contentModulesModuleCodeProblemsGetCall(moduleCode, _callback);

    }

    /**
     * Obtener todos los problemas/preguntas de un módulo
     * Reemplaza la carga de archivos estáticos en &#x60;stores/createQuestionsSlice.ts&#x60;. Devuelve *toda* la lista de problemas (incluyendo &#39;INFO&#39;, &#39;MULTIPLE_CHOICE&#39;, etc.) para un módulo, que &#x60;pages/lesson.tsx&#x60; consumirá.
     * @param moduleCode  (required)
     * @return List&lt;ProblemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los problemas/preguntas para ese módulo. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurso no encontrado. </td><td>  -  </td></tr>
     </table>
     */
    public List<ProblemDTO> contentModulesModuleCodeProblemsGet(String moduleCode) throws ApiException {
        ApiResponse<List<ProblemDTO>> localVarResp = contentModulesModuleCodeProblemsGetWithHttpInfo(moduleCode);
        return localVarResp.getData();
    }

    /**
     * Obtener todos los problemas/preguntas de un módulo
     * Reemplaza la carga de archivos estáticos en &#x60;stores/createQuestionsSlice.ts&#x60;. Devuelve *toda* la lista de problemas (incluyendo &#39;INFO&#39;, &#39;MULTIPLE_CHOICE&#39;, etc.) para un módulo, que &#x60;pages/lesson.tsx&#x60; consumirá.
     * @param moduleCode  (required)
     * @return ApiResponse&lt;List&lt;ProblemDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los problemas/preguntas para ese módulo. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurso no encontrado. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProblemDTO>> contentModulesModuleCodeProblemsGetWithHttpInfo(String moduleCode) throws ApiException {
        okhttp3.Call localVarCall = contentModulesModuleCodeProblemsGetValidateBeforeCall(moduleCode, null);
        Type localVarReturnType = new TypeToken<List<ProblemDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener todos los problemas/preguntas de un módulo (asynchronously)
     * Reemplaza la carga de archivos estáticos en &#x60;stores/createQuestionsSlice.ts&#x60;. Devuelve *toda* la lista de problemas (incluyendo &#39;INFO&#39;, &#39;MULTIPLE_CHOICE&#39;, etc.) para un módulo, que &#x60;pages/lesson.tsx&#x60; consumirá.
     * @param moduleCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de todos los problemas/preguntas para ese módulo. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurso no encontrado. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentModulesModuleCodeProblemsGetAsync(String moduleCode, final ApiCallback<List<ProblemDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentModulesModuleCodeProblemsGetValidateBeforeCall(moduleCode, _callback);
        Type localVarReturnType = new TypeToken<List<ProblemDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentModulesModuleCodeUnitGet
     * @param moduleCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalles de la unidad y sus &#39;tiles&#39; (lecciones). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurso no encontrado. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentModulesModuleCodeUnitGetCall(String moduleCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/modules/{moduleCode}/unit"
            .replace("{" + "moduleCode" + "}", localVarApiClient.escapeString(moduleCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentModulesModuleCodeUnitGetValidateBeforeCall(String moduleCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleCode' is set
        if (moduleCode == null) {
            throw new ApiException("Missing the required parameter 'moduleCode' when calling contentModulesModuleCodeUnitGet(Async)");
        }

        return contentModulesModuleCodeUnitGetCall(moduleCode, _callback);

    }

    /**
     * Obtener la unidad activa para un módulo
     * Devuelve la estructura de la unidad actual para un módulo (basado en &#x60;utils/units.ts&#x60;, que muestra una unidad por módulo). Incluye la lista de &#39;tiles&#39; (lecciones) para renderizar en &#x60;pages/learn.tsx&#x60;.
     * @param moduleCode  (required)
     * @return UnitDetailDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalles de la unidad y sus &#39;tiles&#39; (lecciones). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurso no encontrado. </td><td>  -  </td></tr>
     </table>
     */
    public UnitDetailDTO contentModulesModuleCodeUnitGet(String moduleCode) throws ApiException {
        ApiResponse<UnitDetailDTO> localVarResp = contentModulesModuleCodeUnitGetWithHttpInfo(moduleCode);
        return localVarResp.getData();
    }

    /**
     * Obtener la unidad activa para un módulo
     * Devuelve la estructura de la unidad actual para un módulo (basado en &#x60;utils/units.ts&#x60;, que muestra una unidad por módulo). Incluye la lista de &#39;tiles&#39; (lecciones) para renderizar en &#x60;pages/learn.tsx&#x60;.
     * @param moduleCode  (required)
     * @return ApiResponse&lt;UnitDetailDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalles de la unidad y sus &#39;tiles&#39; (lecciones). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurso no encontrado. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnitDetailDTO> contentModulesModuleCodeUnitGetWithHttpInfo(String moduleCode) throws ApiException {
        okhttp3.Call localVarCall = contentModulesModuleCodeUnitGetValidateBeforeCall(moduleCode, null);
        Type localVarReturnType = new TypeToken<UnitDetailDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener la unidad activa para un módulo (asynchronously)
     * Devuelve la estructura de la unidad actual para un módulo (basado en &#x60;utils/units.ts&#x60;, que muestra una unidad por módulo). Incluye la lista de &#39;tiles&#39; (lecciones) para renderizar en &#x60;pages/learn.tsx&#x60;.
     * @param moduleCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalles de la unidad y sus &#39;tiles&#39; (lecciones). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurso no encontrado. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentModulesModuleCodeUnitGetAsync(String moduleCode, final ApiCallback<UnitDetailDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentModulesModuleCodeUnitGetValidateBeforeCall(moduleCode, _callback);
        Type localVarReturnType = new TypeToken<UnitDetailDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
