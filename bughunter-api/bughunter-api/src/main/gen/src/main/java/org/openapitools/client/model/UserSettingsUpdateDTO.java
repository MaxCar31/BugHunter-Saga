/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Diseñada para soportar la implementación del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Campos para actualizar en &#x60;settings/coach.tsx&#x60; y &#x60;settings/sound.tsx&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T23:30:11.610365800-05:00[America/Guayaquil]", comments = "Generator version: 7.7.0")
public class UserSettingsUpdateDTO {
  /**
   * Gets or Sets dailyXpGoal
   */
  @JsonAdapter(DailyXpGoalEnum.Adapter.class)
  public enum DailyXpGoalEnum {
    NUMBER_1(1),
    
    NUMBER_10(10),
    
    NUMBER_20(20),
    
    NUMBER_30(30),
    
    NUMBER_50(50);

    private Integer value;

    DailyXpGoalEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DailyXpGoalEnum fromValue(Integer value) {
      for (DailyXpGoalEnum b : DailyXpGoalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DailyXpGoalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DailyXpGoalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DailyXpGoalEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DailyXpGoalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DailyXpGoalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAILY_XP_GOAL = "dailyXpGoal";
  @SerializedName(SERIALIZED_NAME_DAILY_XP_GOAL)
  private DailyXpGoalEnum dailyXpGoal;

  public static final String SERIALIZED_NAME_SOUND_EFFECTS_ENABLED = "soundEffectsEnabled";
  @SerializedName(SERIALIZED_NAME_SOUND_EFFECTS_ENABLED)
  private Boolean soundEffectsEnabled;

  public static final String SERIALIZED_NAME_SPEAKING_EXERCISES = "speakingExercises";
  @SerializedName(SERIALIZED_NAME_SPEAKING_EXERCISES)
  private Boolean speakingExercises;

  public static final String SERIALIZED_NAME_LISTENING_EXERCISES = "listeningExercises";
  @SerializedName(SERIALIZED_NAME_LISTENING_EXERCISES)
  private Boolean listeningExercises;

  public UserSettingsUpdateDTO() {
  }

  public UserSettingsUpdateDTO dailyXpGoal(DailyXpGoalEnum dailyXpGoal) {
    this.dailyXpGoal = dailyXpGoal;
    return this;
  }

  /**
   * Get dailyXpGoal
   * @return dailyXpGoal
   */
  @javax.annotation.Nullable
  public DailyXpGoalEnum getDailyXpGoal() {
    return dailyXpGoal;
  }

  public void setDailyXpGoal(DailyXpGoalEnum dailyXpGoal) {
    this.dailyXpGoal = dailyXpGoal;
  }


  public UserSettingsUpdateDTO soundEffectsEnabled(Boolean soundEffectsEnabled) {
    this.soundEffectsEnabled = soundEffectsEnabled;
    return this;
  }

  /**
   * Get soundEffectsEnabled
   * @return soundEffectsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSoundEffectsEnabled() {
    return soundEffectsEnabled;
  }

  public void setSoundEffectsEnabled(Boolean soundEffectsEnabled) {
    this.soundEffectsEnabled = soundEffectsEnabled;
  }


  public UserSettingsUpdateDTO speakingExercises(Boolean speakingExercises) {
    this.speakingExercises = speakingExercises;
    return this;
  }

  /**
   * Get speakingExercises
   * @return speakingExercises
   */
  @javax.annotation.Nullable
  public Boolean getSpeakingExercises() {
    return speakingExercises;
  }

  public void setSpeakingExercises(Boolean speakingExercises) {
    this.speakingExercises = speakingExercises;
  }


  public UserSettingsUpdateDTO listeningExercises(Boolean listeningExercises) {
    this.listeningExercises = listeningExercises;
    return this;
  }

  /**
   * Get listeningExercises
   * @return listeningExercises
   */
  @javax.annotation.Nullable
  public Boolean getListeningExercises() {
    return listeningExercises;
  }

  public void setListeningExercises(Boolean listeningExercises) {
    this.listeningExercises = listeningExercises;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSettingsUpdateDTO userSettingsUpdateDTO = (UserSettingsUpdateDTO) o;
    return Objects.equals(this.dailyXpGoal, userSettingsUpdateDTO.dailyXpGoal) &&
        Objects.equals(this.soundEffectsEnabled, userSettingsUpdateDTO.soundEffectsEnabled) &&
        Objects.equals(this.speakingExercises, userSettingsUpdateDTO.speakingExercises) &&
        Objects.equals(this.listeningExercises, userSettingsUpdateDTO.listeningExercises);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dailyXpGoal, soundEffectsEnabled, speakingExercises, listeningExercises);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSettingsUpdateDTO {\n");
    sb.append("    dailyXpGoal: ").append(toIndentedString(dailyXpGoal)).append("\n");
    sb.append("    soundEffectsEnabled: ").append(toIndentedString(soundEffectsEnabled)).append("\n");
    sb.append("    speakingExercises: ").append(toIndentedString(speakingExercises)).append("\n");
    sb.append("    listeningExercises: ").append(toIndentedString(listeningExercises)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dailyXpGoal");
    openapiFields.add("soundEffectsEnabled");
    openapiFields.add("speakingExercises");
    openapiFields.add("listeningExercises");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserSettingsUpdateDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserSettingsUpdateDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSettingsUpdateDTO is not found in the empty JSON string", UserSettingsUpdateDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserSettingsUpdateDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserSettingsUpdateDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dailyXpGoal`
      if (jsonObj.get("dailyXpGoal") != null && !jsonObj.get("dailyXpGoal").isJsonNull()) {
        DailyXpGoalEnum.validateJsonElement(jsonObj.get("dailyXpGoal"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSettingsUpdateDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSettingsUpdateDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSettingsUpdateDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSettingsUpdateDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSettingsUpdateDTO>() {
           @Override
           public void write(JsonWriter out, UserSettingsUpdateDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSettingsUpdateDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserSettingsUpdateDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserSettingsUpdateDTO
   * @throws IOException if the JSON string is invalid with respect to UserSettingsUpdateDTO
   */
  public static UserSettingsUpdateDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSettingsUpdateDTO.class);
  }

  /**
   * Convert an instance of UserSettingsUpdateDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

