/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Diseñada para soportar la implementación del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorDTO;
import org.openapitools.client.model.LeaderboardDTO;
import org.openapitools.client.model.ShopItemDTO;
import org.openapitools.client.model.UserStatsDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GamificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GamificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GamificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for leaderboardGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tabla de clasificación semanal. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> El usuario aún no ha desbloqueado las clasificaciones. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaderboardGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leaderboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaderboardGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return leaderboardGetCall(_callback);

    }

    /**
     * Obtener la tabla de clasificación
     * Devuelve la tabla de clasificación de la liga actual del usuario para &#x60;pages/leaderboard.tsx&#x60;.
     * @return LeaderboardDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tabla de clasificación semanal. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> El usuario aún no ha desbloqueado las clasificaciones. </td><td>  -  </td></tr>
     </table>
     */
    public LeaderboardDTO leaderboardGet() throws ApiException {
        ApiResponse<LeaderboardDTO> localVarResp = leaderboardGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener la tabla de clasificación
     * Devuelve la tabla de clasificación de la liga actual del usuario para &#x60;pages/leaderboard.tsx&#x60;.
     * @return ApiResponse&lt;LeaderboardDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tabla de clasificación semanal. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> El usuario aún no ha desbloqueado las clasificaciones. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeaderboardDTO> leaderboardGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = leaderboardGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LeaderboardDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener la tabla de clasificación (asynchronously)
     * Devuelve la tabla de clasificación de la liga actual del usuario para &#x60;pages/leaderboard.tsx&#x60;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tabla de clasificación semanal. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> El usuario aún no ha desbloqueado las clasificaciones. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaderboardGetAsync(final ApiCallback<LeaderboardDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaderboardGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LeaderboardDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shopItemsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de artículos. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shopItemsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shop/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shopItemsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return shopItemsGetCall(_callback);

    }

    /**
     * Obtener los artículos de la tienda
     * Devuelve los artículos disponibles en &#x60;pages/shop.tsx&#x60;.
     * @return List&lt;ShopItemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de artículos. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public List<ShopItemDTO> shopItemsGet() throws ApiException {
        ApiResponse<List<ShopItemDTO>> localVarResp = shopItemsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener los artículos de la tienda
     * Devuelve los artículos disponibles en &#x60;pages/shop.tsx&#x60;.
     * @return ApiResponse&lt;List&lt;ShopItemDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de artículos. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShopItemDTO>> shopItemsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = shopItemsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ShopItemDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener los artículos de la tienda (asynchronously)
     * Devuelve los artículos disponibles en &#x60;pages/shop.tsx&#x60;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de artículos. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shopItemsGetAsync(final ApiCallback<List<ShopItemDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = shopItemsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ShopItemDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shopPurchaseItemIdPost
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compra exitosa. Devuelve el estado actualizado del perfil/inventario. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fondos (lingots) insuficientes o artículo no válido. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shopPurchaseItemIdPostCall(String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shop/purchase/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shopPurchaseItemIdPostValidateBeforeCall(String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling shopPurchaseItemIdPost(Async)");
        }

        return shopPurchaseItemIdPostCall(itemId, _callback);

    }

    /**
     * Comprar un artículo de la tienda
     * Permite al usuario comprar un artículo (ej. &#39;streak-freeze&#39;) usando &#39;lingots&#39;.
     * @param itemId  (required)
     * @return UserStatsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compra exitosa. Devuelve el estado actualizado del perfil/inventario. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fondos (lingots) insuficientes o artículo no válido. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public UserStatsDTO shopPurchaseItemIdPost(String itemId) throws ApiException {
        ApiResponse<UserStatsDTO> localVarResp = shopPurchaseItemIdPostWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Comprar un artículo de la tienda
     * Permite al usuario comprar un artículo (ej. &#39;streak-freeze&#39;) usando &#39;lingots&#39;.
     * @param itemId  (required)
     * @return ApiResponse&lt;UserStatsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compra exitosa. Devuelve el estado actualizado del perfil/inventario. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fondos (lingots) insuficientes o artículo no válido. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserStatsDTO> shopPurchaseItemIdPostWithHttpInfo(String itemId) throws ApiException {
        okhttp3.Call localVarCall = shopPurchaseItemIdPostValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<UserStatsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Comprar un artículo de la tienda (asynchronously)
     * Permite al usuario comprar un artículo (ej. &#39;streak-freeze&#39;) usando &#39;lingots&#39;.
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compra exitosa. Devuelve el estado actualizado del perfil/inventario. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fondos (lingots) insuficientes o artículo no válido. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shopPurchaseItemIdPostAsync(String itemId, final ApiCallback<UserStatsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = shopPurchaseItemIdPostValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<UserStatsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
