/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Diseñada para soportar la implementación del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorDTO;
import org.openapitools.client.model.LessonCompletionResponseDTO;
import org.openapitools.client.model.LessonResultDTO;
import org.openapitools.client.model.ProgressTreasureLessonIdPost200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProgressApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProgressApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProgressApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for progressLessonPost
     * @param lessonResultDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progreso guardado, devuelve recompensas. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call progressLessonPostCall(LessonResultDTO lessonResultDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lessonResultDTO;

        // create path and map variables
        String localVarPath = "/progress/lesson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call progressLessonPostValidateBeforeCall(LessonResultDTO lessonResultDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lessonResultDTO' is set
        if (lessonResultDTO == null) {
            throw new ApiException("Missing the required parameter 'lessonResultDTO' when calling progressLessonPost(Async)");
        }

        return progressLessonPostCall(lessonResultDTO, _callback);

    }

    /**
     * Registrar finalización de una lección
     * Se llama desde &#x60;LessonComplete&#x60; en &#x60;lesson.tsx&#x60;. El backend debe: 1. Registrar la lección en &#x60;user_lesson_progress&#x60;. 2. Calcular y registrar el XP en &#x60;user_xp_history&#x60;. 3. Calcular y actualizar la racha en &#x60;user_streaks&#x60;. 4. Otorga lingots/Puntos QA (si no es práctica) y actualizar &#x60;user_profiles&#x60;.
     * @param lessonResultDTO  (required)
     * @return LessonCompletionResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progreso guardado, devuelve recompensas. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public LessonCompletionResponseDTO progressLessonPost(LessonResultDTO lessonResultDTO) throws ApiException {
        ApiResponse<LessonCompletionResponseDTO> localVarResp = progressLessonPostWithHttpInfo(lessonResultDTO);
        return localVarResp.getData();
    }

    /**
     * Registrar finalización de una lección
     * Se llama desde &#x60;LessonComplete&#x60; en &#x60;lesson.tsx&#x60;. El backend debe: 1. Registrar la lección en &#x60;user_lesson_progress&#x60;. 2. Calcular y registrar el XP en &#x60;user_xp_history&#x60;. 3. Calcular y actualizar la racha en &#x60;user_streaks&#x60;. 4. Otorga lingots/Puntos QA (si no es práctica) y actualizar &#x60;user_profiles&#x60;.
     * @param lessonResultDTO  (required)
     * @return ApiResponse&lt;LessonCompletionResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progreso guardado, devuelve recompensas. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LessonCompletionResponseDTO> progressLessonPostWithHttpInfo(LessonResultDTO lessonResultDTO) throws ApiException {
        okhttp3.Call localVarCall = progressLessonPostValidateBeforeCall(lessonResultDTO, null);
        Type localVarReturnType = new TypeToken<LessonCompletionResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Registrar finalización de una lección (asynchronously)
     * Se llama desde &#x60;LessonComplete&#x60; en &#x60;lesson.tsx&#x60;. El backend debe: 1. Registrar la lección en &#x60;user_lesson_progress&#x60;. 2. Calcular y registrar el XP en &#x60;user_xp_history&#x60;. 3. Calcular y actualizar la racha en &#x60;user_streaks&#x60;. 4. Otorga lingots/Puntos QA (si no es práctica) y actualizar &#x60;user_profiles&#x60;.
     * @param lessonResultDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progreso guardado, devuelve recompensas. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call progressLessonPostAsync(LessonResultDTO lessonResultDTO, final ApiCallback<LessonCompletionResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = progressLessonPostValidateBeforeCall(lessonResultDTO, _callback);
        Type localVarReturnType = new TypeToken<LessonCompletionResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for progressTreasureLessonIdPost
     * @param lessonId ID de la lección (o tile) que representa el tesoro. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recompensa reclamada. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Tesoro ya reclamado o no desbloqueado. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call progressTreasureLessonIdPostCall(Integer lessonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/progress/treasure/{lessonId}"
            .replace("{" + "lessonId" + "}", localVarApiClient.escapeString(lessonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call progressTreasureLessonIdPostValidateBeforeCall(Integer lessonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling progressTreasureLessonIdPost(Async)");
        }

        return progressTreasureLessonIdPostCall(lessonId, _callback);

    }

    /**
     * Reclamar un cofre de tesoro
     * Se llama desde &#x60;pages/learn.tsx&#x60; al hacer clic en un cofre activo. El backend otorga lingots/Puntos QA.
     * @param lessonId ID de la lección (o tile) que representa el tesoro. (required)
     * @return ProgressTreasureLessonIdPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recompensa reclamada. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Tesoro ya reclamado o no desbloqueado. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ProgressTreasureLessonIdPost200Response progressTreasureLessonIdPost(Integer lessonId) throws ApiException {
        ApiResponse<ProgressTreasureLessonIdPost200Response> localVarResp = progressTreasureLessonIdPostWithHttpInfo(lessonId);
        return localVarResp.getData();
    }

    /**
     * Reclamar un cofre de tesoro
     * Se llama desde &#x60;pages/learn.tsx&#x60; al hacer clic en un cofre activo. El backend otorga lingots/Puntos QA.
     * @param lessonId ID de la lección (o tile) que representa el tesoro. (required)
     * @return ApiResponse&lt;ProgressTreasureLessonIdPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recompensa reclamada. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Tesoro ya reclamado o no desbloqueado. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProgressTreasureLessonIdPost200Response> progressTreasureLessonIdPostWithHttpInfo(Integer lessonId) throws ApiException {
        okhttp3.Call localVarCall = progressTreasureLessonIdPostValidateBeforeCall(lessonId, null);
        Type localVarReturnType = new TypeToken<ProgressTreasureLessonIdPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reclamar un cofre de tesoro (asynchronously)
     * Se llama desde &#x60;pages/learn.tsx&#x60; al hacer clic en un cofre activo. El backend otorga lingots/Puntos QA.
     * @param lessonId ID de la lección (o tile) que representa el tesoro. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recompensa reclamada. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Tesoro ya reclamado o no desbloqueado. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call progressTreasureLessonIdPostAsync(Integer lessonId, final ApiCallback<ProgressTreasureLessonIdPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = progressTreasureLessonIdPostValidateBeforeCall(lessonId, _callback);
        Type localVarReturnType = new TypeToken<ProgressTreasureLessonIdPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
