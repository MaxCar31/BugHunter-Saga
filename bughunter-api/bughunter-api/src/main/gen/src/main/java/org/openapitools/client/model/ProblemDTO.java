/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Diseñada para soportar la implementación del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProblemDTOAnswersInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Una única pregunta o pieza de contenido dentro de una lección
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T23:30:11.610365800-05:00[America/Guayaquil]", comments = "Generator version: 7.7.0")
public class ProblemDTO {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INFO("INFO"),
    
    MULTIPLE_CHOICE("MULTIPLE_CHOICE"),
    
    FILL_IN_THE_BLANK("FILL_IN_THE_BLANK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_MODULE_TITLE = "moduleTitle";
  @SerializedName(SERIALIZED_NAME_MODULE_TITLE)
  private String moduleTitle;

  public static final String SERIALIZED_NAME_INTRODUCTION = "introduction";
  @SerializedName(SERIALIZED_NAME_INTRODUCTION)
  private String introduction;

  public static final String SERIALIZED_NAME_OBJECTIVES = "objectives";
  @SerializedName(SERIALIZED_NAME_OBJECTIVES)
  private List<String> objectives;

  public static final String SERIALIZED_NAME_QUESTION = "question";
  @SerializedName(SERIALIZED_NAME_QUESTION)
  private String question;

  public static final String SERIALIZED_NAME_ANSWERS = "answers";
  @SerializedName(SERIALIZED_NAME_ANSWERS)
  private List<ProblemDTOAnswersInner> answers;

  public static final String SERIALIZED_NAME_CORRECT_ANSWER = "correctAnswer";
  @SerializedName(SERIALIZED_NAME_CORRECT_ANSWER)
  private Integer correctAnswer;

  public static final String SERIALIZED_NAME_ANSWER_TILES = "answerTiles";
  @SerializedName(SERIALIZED_NAME_ANSWER_TILES)
  private List<String> answerTiles;

  public static final String SERIALIZED_NAME_CORRECT_ANSWER_INDICES = "correctAnswerIndices";
  @SerializedName(SERIALIZED_NAME_CORRECT_ANSWER_INDICES)
  private List<Integer> correctAnswerIndices;

  public ProblemDTO() {
  }

  public ProblemDTO type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ProblemDTO moduleTitle(String moduleTitle) {
    this.moduleTitle = moduleTitle;
    return this;
  }

  /**
   * Get moduleTitle
   * @return moduleTitle
   */
  @javax.annotation.Nullable
  public String getModuleTitle() {
    return moduleTitle;
  }

  public void setModuleTitle(String moduleTitle) {
    this.moduleTitle = moduleTitle;
  }


  public ProblemDTO introduction(String introduction) {
    this.introduction = introduction;
    return this;
  }

  /**
   * Get introduction
   * @return introduction
   */
  @javax.annotation.Nullable
  public String getIntroduction() {
    return introduction;
  }

  public void setIntroduction(String introduction) {
    this.introduction = introduction;
  }


  public ProblemDTO objectives(List<String> objectives) {
    this.objectives = objectives;
    return this;
  }

  public ProblemDTO addObjectivesItem(String objectivesItem) {
    if (this.objectives == null) {
      this.objectives = new ArrayList<>();
    }
    this.objectives.add(objectivesItem);
    return this;
  }

  /**
   * Get objectives
   * @return objectives
   */
  @javax.annotation.Nullable
  public List<String> getObjectives() {
    return objectives;
  }

  public void setObjectives(List<String> objectives) {
    this.objectives = objectives;
  }


  public ProblemDTO question(String question) {
    this.question = question;
    return this;
  }

  /**
   * Get question
   * @return question
   */
  @javax.annotation.Nullable
  public String getQuestion() {
    return question;
  }

  public void setQuestion(String question) {
    this.question = question;
  }


  public ProblemDTO answers(List<ProblemDTOAnswersInner> answers) {
    this.answers = answers;
    return this;
  }

  public ProblemDTO addAnswersItem(ProblemDTOAnswersInner answersItem) {
    if (this.answers == null) {
      this.answers = new ArrayList<>();
    }
    this.answers.add(answersItem);
    return this;
  }

  /**
   * Get answers
   * @return answers
   */
  @javax.annotation.Nullable
  public List<ProblemDTOAnswersInner> getAnswers() {
    return answers;
  }

  public void setAnswers(List<ProblemDTOAnswersInner> answers) {
    this.answers = answers;
  }


  public ProblemDTO correctAnswer(Integer correctAnswer) {
    this.correctAnswer = correctAnswer;
    return this;
  }

  /**
   * Get correctAnswer
   * @return correctAnswer
   */
  @javax.annotation.Nullable
  public Integer getCorrectAnswer() {
    return correctAnswer;
  }

  public void setCorrectAnswer(Integer correctAnswer) {
    this.correctAnswer = correctAnswer;
  }


  public ProblemDTO answerTiles(List<String> answerTiles) {
    this.answerTiles = answerTiles;
    return this;
  }

  public ProblemDTO addAnswerTilesItem(String answerTilesItem) {
    if (this.answerTiles == null) {
      this.answerTiles = new ArrayList<>();
    }
    this.answerTiles.add(answerTilesItem);
    return this;
  }

  /**
   * Get answerTiles
   * @return answerTiles
   */
  @javax.annotation.Nullable
  public List<String> getAnswerTiles() {
    return answerTiles;
  }

  public void setAnswerTiles(List<String> answerTiles) {
    this.answerTiles = answerTiles;
  }


  public ProblemDTO correctAnswerIndices(List<Integer> correctAnswerIndices) {
    this.correctAnswerIndices = correctAnswerIndices;
    return this;
  }

  public ProblemDTO addCorrectAnswerIndicesItem(Integer correctAnswerIndicesItem) {
    if (this.correctAnswerIndices == null) {
      this.correctAnswerIndices = new ArrayList<>();
    }
    this.correctAnswerIndices.add(correctAnswerIndicesItem);
    return this;
  }

  /**
   * Get correctAnswerIndices
   * @return correctAnswerIndices
   */
  @javax.annotation.Nullable
  public List<Integer> getCorrectAnswerIndices() {
    return correctAnswerIndices;
  }

  public void setCorrectAnswerIndices(List<Integer> correctAnswerIndices) {
    this.correctAnswerIndices = correctAnswerIndices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProblemDTO problemDTO = (ProblemDTO) o;
    return Objects.equals(this.type, problemDTO.type) &&
        Objects.equals(this.moduleTitle, problemDTO.moduleTitle) &&
        Objects.equals(this.introduction, problemDTO.introduction) &&
        Objects.equals(this.objectives, problemDTO.objectives) &&
        Objects.equals(this.question, problemDTO.question) &&
        Objects.equals(this.answers, problemDTO.answers) &&
        Objects.equals(this.correctAnswer, problemDTO.correctAnswer) &&
        Objects.equals(this.answerTiles, problemDTO.answerTiles) &&
        Objects.equals(this.correctAnswerIndices, problemDTO.correctAnswerIndices);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, moduleTitle, introduction, objectives, question, answers, correctAnswer, answerTiles, correctAnswerIndices);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProblemDTO {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    moduleTitle: ").append(toIndentedString(moduleTitle)).append("\n");
    sb.append("    introduction: ").append(toIndentedString(introduction)).append("\n");
    sb.append("    objectives: ").append(toIndentedString(objectives)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    correctAnswer: ").append(toIndentedString(correctAnswer)).append("\n");
    sb.append("    answerTiles: ").append(toIndentedString(answerTiles)).append("\n");
    sb.append("    correctAnswerIndices: ").append(toIndentedString(correctAnswerIndices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("moduleTitle");
    openapiFields.add("introduction");
    openapiFields.add("objectives");
    openapiFields.add("question");
    openapiFields.add("answers");
    openapiFields.add("correctAnswer");
    openapiFields.add("answerTiles");
    openapiFields.add("correctAnswerIndices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProblemDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProblemDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProblemDTO is not found in the empty JSON string", ProblemDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProblemDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProblemDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("moduleTitle") != null && !jsonObj.get("moduleTitle").isJsonNull()) && !jsonObj.get("moduleTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moduleTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moduleTitle").toString()));
      }
      if ((jsonObj.get("introduction") != null && !jsonObj.get("introduction").isJsonNull()) && !jsonObj.get("introduction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `introduction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("introduction").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("objectives") != null && !jsonObj.get("objectives").isJsonNull() && !jsonObj.get("objectives").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectives` to be an array in the JSON string but got `%s`", jsonObj.get("objectives").toString()));
      }
      if ((jsonObj.get("question") != null && !jsonObj.get("question").isJsonNull()) && !jsonObj.get("question").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `question` to be a primitive type in the JSON string but got `%s`", jsonObj.get("question").toString()));
      }
      if (jsonObj.get("answers") != null && !jsonObj.get("answers").isJsonNull()) {
        JsonArray jsonArrayanswers = jsonObj.getAsJsonArray("answers");
        if (jsonArrayanswers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("answers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `answers` to be an array in the JSON string but got `%s`", jsonObj.get("answers").toString()));
          }

          // validate the optional field `answers` (array)
          for (int i = 0; i < jsonArrayanswers.size(); i++) {
            ProblemDTOAnswersInner.validateJsonElement(jsonArrayanswers.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("answerTiles") != null && !jsonObj.get("answerTiles").isJsonNull() && !jsonObj.get("answerTiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerTiles` to be an array in the JSON string but got `%s`", jsonObj.get("answerTiles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("correctAnswerIndices") != null && !jsonObj.get("correctAnswerIndices").isJsonNull() && !jsonObj.get("correctAnswerIndices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `correctAnswerIndices` to be an array in the JSON string but got `%s`", jsonObj.get("correctAnswerIndices").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProblemDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProblemDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProblemDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProblemDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ProblemDTO>() {
           @Override
           public void write(JsonWriter out, ProblemDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProblemDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProblemDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProblemDTO
   * @throws IOException if the JSON string is invalid with respect to ProblemDTO
   */
  public static ProblemDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProblemDTO.class);
  }

  /**
   * Convert an instance of ProblemDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

