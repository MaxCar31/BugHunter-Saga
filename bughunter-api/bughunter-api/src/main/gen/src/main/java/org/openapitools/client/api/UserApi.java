/*
 * BugHunter Saga API
 * API (Contrato Primero) para la plataforma gamificada BugHunter Saga. Diseñada para soportar la implementación del frontend en Next.js y el backend en Spring Boot para el proyecto de tesis de Max Carrión.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorDTO;
import org.openapitools.client.model.UserAccountUpdateDTO;
import org.openapitools.client.model.UserInfoDTO;
import org.openapitools.client.model.UserProfileDTO;
import org.openapitools.client.model.UserSettingsUpdateDTO;
import org.openapitools.client.model.UserStatsDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usersMeAccountPut
     * @param userAccountUpdateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cuenta actualizada. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeAccountPutCall(UserAccountUpdateDTO userAccountUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userAccountUpdateDTO;

        // create path and map variables
        String localVarPath = "/users/me/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersMeAccountPutValidateBeforeCall(UserAccountUpdateDTO userAccountUpdateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAccountUpdateDTO' is set
        if (userAccountUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'userAccountUpdateDTO' when calling usersMeAccountPut(Async)");
        }

        return usersMeAccountPutCall(userAccountUpdateDTO, _callback);

    }

    /**
     * Actualizar datos de la cuenta (nombre/username)
     * Usado por &#x60;pages/settings/account.tsx&#x60; para guardar cambios.
     * @param userAccountUpdateDTO  (required)
     * @return UserInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cuenta actualizada. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public UserInfoDTO usersMeAccountPut(UserAccountUpdateDTO userAccountUpdateDTO) throws ApiException {
        ApiResponse<UserInfoDTO> localVarResp = usersMeAccountPutWithHttpInfo(userAccountUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * Actualizar datos de la cuenta (nombre/username)
     * Usado por &#x60;pages/settings/account.tsx&#x60; para guardar cambios.
     * @param userAccountUpdateDTO  (required)
     * @return ApiResponse&lt;UserInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cuenta actualizada. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserInfoDTO> usersMeAccountPutWithHttpInfo(UserAccountUpdateDTO userAccountUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = usersMeAccountPutValidateBeforeCall(userAccountUpdateDTO, null);
        Type localVarReturnType = new TypeToken<UserInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Actualizar datos de la cuenta (nombre/username) (asynchronously)
     * Usado por &#x60;pages/settings/account.tsx&#x60; para guardar cambios.
     * @param userAccountUpdateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cuenta actualizada. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeAccountPutAsync(UserAccountUpdateDTO userAccountUpdateDTO, final ApiCallback<UserInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersMeAccountPutValidateBeforeCall(userAccountUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<UserInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersMeProfileGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil completo del usuario. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeProfileGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersMeProfileGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return usersMeProfileGetCall(_callback);

    }

    /**
     * Obtener el perfil completo del usuario
     * Devuelve toda la información del usuario autenticado, incluyendo datos personales y configuraciones.
     * @return UserProfileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil completo del usuario. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public UserProfileDTO usersMeProfileGet() throws ApiException {
        ApiResponse<UserProfileDTO> localVarResp = usersMeProfileGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener el perfil completo del usuario
     * Devuelve toda la información del usuario autenticado, incluyendo datos personales y configuraciones.
     * @return ApiResponse&lt;UserProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil completo del usuario. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserProfileDTO> usersMeProfileGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersMeProfileGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener el perfil completo del usuario (asynchronously)
     * Devuelve toda la información del usuario autenticado, incluyendo datos personales y configuraciones.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil completo del usuario. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeProfileGetAsync(final ApiCallback<UserProfileDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersMeProfileGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersMeSettingsPut
     * @param userSettingsUpdateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuraciones actualizadas. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeSettingsPutCall(UserSettingsUpdateDTO userSettingsUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userSettingsUpdateDTO;

        // create path and map variables
        String localVarPath = "/users/me/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersMeSettingsPutValidateBeforeCall(UserSettingsUpdateDTO userSettingsUpdateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userSettingsUpdateDTO' is set
        if (userSettingsUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'userSettingsUpdateDTO' when calling usersMeSettingsPut(Async)");
        }

        return usersMeSettingsPutCall(userSettingsUpdateDTO, _callback);

    }

    /**
     * Actualizar configuraciones del usuario (meta, sonido)
     * Usado por &#x60;pages/settings/coach.tsx&#x60; y &#x60;pages/settings/sound.tsx&#x60;.
     * @param userSettingsUpdateDTO  (required)
     * @return UserProfileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuraciones actualizadas. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public UserProfileDTO usersMeSettingsPut(UserSettingsUpdateDTO userSettingsUpdateDTO) throws ApiException {
        ApiResponse<UserProfileDTO> localVarResp = usersMeSettingsPutWithHttpInfo(userSettingsUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * Actualizar configuraciones del usuario (meta, sonido)
     * Usado por &#x60;pages/settings/coach.tsx&#x60; y &#x60;pages/settings/sound.tsx&#x60;.
     * @param userSettingsUpdateDTO  (required)
     * @return ApiResponse&lt;UserProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuraciones actualizadas. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserProfileDTO> usersMeSettingsPutWithHttpInfo(UserSettingsUpdateDTO userSettingsUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = usersMeSettingsPutValidateBeforeCall(userSettingsUpdateDTO, null);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Actualizar configuraciones del usuario (meta, sonido) (asynchronously)
     * Usado por &#x60;pages/settings/coach.tsx&#x60; y &#x60;pages/settings/sound.tsx&#x60;.
     * @param userSettingsUpdateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuraciones actualizadas. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud inválida (e.g., falta un campo, email inválido, username ya existe). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeSettingsPutAsync(UserSettingsUpdateDTO userSettingsUpdateDTO, final ApiCallback<UserProfileDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersMeSettingsPutValidateBeforeCall(userSettingsUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersMeStatsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estadísticas del usuario. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeStatsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersMeStatsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return usersMeStatsGetCall(_callback);

    }

    /**
     * Obtener estadísticas de gamificación del usuario
     * Endpoint optimizado para &#x60;RightBar.tsx&#x60; y &#x60;TopBar.tsx&#x60;, proporciona todos los datos dinámicos.
     * @return UserStatsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estadísticas del usuario. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public UserStatsDTO usersMeStatsGet() throws ApiException {
        ApiResponse<UserStatsDTO> localVarResp = usersMeStatsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener estadísticas de gamificación del usuario
     * Endpoint optimizado para &#x60;RightBar.tsx&#x60; y &#x60;TopBar.tsx&#x60;, proporciona todos los datos dinámicos.
     * @return ApiResponse&lt;UserStatsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estadísticas del usuario. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserStatsDTO> usersMeStatsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersMeStatsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserStatsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener estadísticas de gamificación del usuario (asynchronously)
     * Endpoint optimizado para &#x60;RightBar.tsx&#x60; y &#x60;TopBar.tsx&#x60;, proporciona todos los datos dinámicos.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estadísticas del usuario. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No autenticado (token no provisto o inválido). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeStatsGetAsync(final ApiCallback<UserStatsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersMeStatsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserStatsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
