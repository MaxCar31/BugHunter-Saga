Árbol de archivos del directorio: BugHunter
================================================================================

## 🌳 ESTRUCTURA DE ARCHIVOS

│   ├── 📄 BugHunterApplication.java
│   ├── 📁 controller/
│   │   ├── 📄 UserController.java
│   ├── 📁 dto/
│   │   ├── 📄 UserLoginDTO.java
│   │   ├── 📄 UserRegistrationDTO.java
│   ├── 📁 model/
│   │   ├── 📄 Lesson.java
│   │   ├── 📄 Module.java
│   │   ├── 📄 Problem.java
│   │   ├── 📄 Unit.java
│   │   ├── 📄 User.java
│   │   ├── 📄 UserLessonProgress.java
│   │   ├── 📄 UserProfile.java
│   │   ├── 📄 UserStreak.java
│   │   ├── 📄 UserXpHistory.java
│   ├── 📁 repository/
│   │   ├── 📄 LessonRepository.java
│   │   ├── 📄 ModuleRepository.java
│   │   ├── 📄 ProblemRepository.java
│   │   ├── 📄 UnitRepository.java
│   │   ├── 📄 UserLessonProgressRepository.java
│   │   ├── 📄 UserProfileRepository.java
│   │   ├── 📄 UserRepository.java
│   │   ├── 📄 UserStreakRepository.java
│   │   ├── 📄 UserXpHistoryRepository.java
│   ├── 📁 service/
│   │   ├── 📄 UserService.java


================================================================================
## 📄 CONTENIDO DETALLADO DE ARCHIVOS
================================================================================

================================================================================
📄 CONTENIDO DE: BugHunterApplication.java
================================================================================
package tic.BugHunter;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BugHunterApplication {

	public static void main(String[] args) {
		SpringApplication.run(BugHunterApplication.class, args);
	}

}


================================================================================
📄 CONTENIDO DE: controller\UserController.java
================================================================================
package tic.BugHunter.controller;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import tic.BugHunter.dto.UserLoginDTO;
import tic.BugHunter.dto.UserRegistrationDTO;
import tic.BugHunter.service.UserService;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class UserController {

    private final UserService userService;

    @PostMapping("/register")
    public ResponseEntity<String> register(@Valid @RequestBody UserRegistrationDTO registrationDTO) {
        userService.registerUser(registrationDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body("User registered successfully");
    }

    @PostMapping("/login")
    public ResponseEntity<AuthResponseDTO> login(@Valid @RequestBody UserLoginDTO loginDTO) {
        AuthResponseDTO response = userService.loginUser(loginDTO);
        return ResponseEntity.ok(response);
    }
}


================================================================================
📄 CONTENIDO DE: dto\UserLoginDTO.java
================================================================================
package tic.BugHunter.dto;

import jakarta.validation.constraints.NotBlank;

public record UserLoginDTO(
        @NotBlank(message = "Email or username is required")
        String emailOrUsername,

        @NotBlank(message = "Password is required")
        String password
) {}

================================================================================
📄 CONTENIDO DE: dto\UserRegistrationDTO.java
================================================================================
package tic.BugHunter.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

public record UserRegistrationDTO(
        @NotBlank(message = "Username is required")
        @Size(min = 3, max = 50, message = "Username must be between 3 and 50 characters")
        String username,

        @NotBlank(message = "Name is required")
        @Size(max = 100, message = "Name must not exceed 100 characters")
        String name,

        @NotBlank(message = "Email is required")
        @Email(message = "Email must be valid")
        String email,

        @NotBlank(message = "Password is required")
        @Size(min = 8, message = "Password must be at least 8 characters")
        String password
) {}

================================================================================
📄 CONTENIDO DE: model\Lesson.java
================================================================================
package tic.BugHunter.model;

import jakarta.persistence.*;
import lombok.*;

import java.util.List;

@Entity
@Table(name = "lessons")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Lesson {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "unit_id", nullable = false)
    private Unit unit;

    @Column(nullable = false, length = 50)
    private String type;

    @Column(columnDefinition = "TEXT")
    private String description;

    @Column(nullable = false)
    private Integer position;

    @OneToMany(mappedBy = "lesson", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Problem> problems;
}

================================================================================
📄 CONTENIDO DE: model\Module.java
================================================================================
package tic.BugHunter.model;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.type.SqlTypes;

import java.util.List;
import java.util.Map;

@Entity
@Table(name = "modules")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Module {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(unique = true, nullable = false, length = 20)
    private String code;

    @Column(nullable = false, length = 100)
    private String name;

    @Column(columnDefinition = "TEXT")
    private String description;

    @JdbcTypeCode(SqlTypes.JSON)
    @Column(name = "ui_config", columnDefinition = "jsonb")
    private Map<String, Object> uiConfig;

    @OneToMany(mappedBy = "module", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Unit> units;
}

================================================================================
📄 CONTENIDO DE: model\Problem.java
================================================================================
package tic.BugHunter.model;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.type.SqlTypes;

import java.util.Map;

@Entity
@Table(name = "problems")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Problem {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "lesson_id", nullable = false)
    private Lesson lesson;

    @Column(nullable = false, length = 50)
    private String type;

    @JdbcTypeCode(SqlTypes.JSON)
    @Column(nullable = false, columnDefinition = "jsonb")
    private Map<String, Object> content;

    @Column(nullable = false)
    private Integer position;
}

================================================================================
📄 CONTENIDO DE: model\Unit.java
================================================================================
package tic.BugHunter.model;

import jakarta.persistence.*;
import lombok.*;

import java.util.List;

@Entity
@Table(name = "units", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"module_id", "unit_number"})
})
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Unit {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "module_id", nullable = false)
    private Module module;

    @Column(name = "unit_number", nullable = false)
    private Integer unitNumber;

    @Column(columnDefinition = "TEXT")
    private String description;

    @OneToMany(mappedBy = "unit", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Lesson> lessons;
}

================================================================================
📄 CONTENIDO DE: model\User.java
================================================================================
package tic.BugHunter.model;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.ZonedDateTime;
import java.util.UUID;

@Entity
@Table(name = "users")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @Column(unique = true, nullable = false, length = 50)
    private String username;

    @Column(length = 100)
    private String name;

    @Column(unique = true, nullable = false)
    private String email;

    @Column(name = "password_hash", nullable = false)
    private String passwordHash;

    @CreationTimestamp
    @Column(name = "created_at", updatable = false)
    private ZonedDateTime createdAt;

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private UserProfile userProfile;
}

================================================================================
📄 CONTENIDO DE: model\UserLessonProgress.java
================================================================================
package tic.BugHunter.model;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.io.Serializable;
import java.time.ZonedDateTime;
import java.util.UUID;

@Entity
@Table(name = "user_lesson_progress")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@IdClass(UserLessonProgress.UserLessonProgressId.class)
public class UserLessonProgress {

    @Id
    @Column(name = "user_id")
    private UUID userId;

    @Id
    @Column(name = "lesson_id")
    private Integer lessonId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", insertable = false, updatable = false)
    private User user;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "lesson_id", insertable = false, updatable = false)
    private Lesson lesson;

    @CreationTimestamp
    @Column(name = "completed_at")
    private ZonedDateTime completedAt;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class UserLessonProgressId implements Serializable {
        private UUID userId;
        private Integer lessonId;
    }
}

================================================================================
📄 CONTENIDO DE: model\UserProfile.java
================================================================================
package tic.BugHunter.model;

import jakarta.persistence.*;
import lombok.*;

import java.util.UUID;

@Entity
@Table(name = "user_profiles")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserProfile {

    @Id
    @Column(name = "user_id")
    private UUID userId;

    @OneToOne
    @MapsId
    @JoinColumn(name = "user_id")
    private User user;

    @Column(nullable = false)
    @Builder.Default
    private Integer lingots = 0;

    @Column(name = "daily_xp_goal", nullable = false)
    @Builder.Default
    private Integer dailyXpGoal = 10;

    @Column(name = "sound_effects_enabled", nullable = false)
    @Builder.Default
    private Boolean soundEffectsEnabled = true;
}

================================================================================
📄 CONTENIDO DE: model\UserStreak.java
================================================================================
package tic.BugHunter.model;

import jakarta.persistence.*;
import lombok.*;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.UUID;

@Entity
@Table(name = "user_streaks")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@IdClass(UserStreak.UserStreakId.class)
public class UserStreak {

    @Id
    @Column(name = "user_id")
    private UUID userId;

    @Id
    @Column(name = "activity_date")
    private LocalDate activityDate;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", insertable = false, updatable = false)
    private User user;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class UserStreakId implements Serializable {
        private UUID userId;
        private LocalDate activityDate;
    }
}

================================================================================
📄 CONTENIDO DE: model\UserXpHistory.java
================================================================================
package tic.BugHunter.model;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.ZonedDateTime;
import java.util.UUID;

@Entity
@Table(name = "user_xp_history")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserXpHistory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(name = "xp_earned", nullable = false)
    private Integer xpEarned;

    @Column(name = "source_type", length = 50)
    private String sourceType;

    @Column(name = "source_id")
    private Integer sourceId;

    @CreationTimestamp
    @Column(name = "created_at", updatable = false)
    private ZonedDateTime createdAt;
}

================================================================================
📄 CONTENIDO DE: repository\LessonRepository.java
================================================================================
package tic.BugHunter.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import tic.BugHunter.model.Lesson;

import java.util.List;
import java.util.Optional;

@Repository
public interface LessonRepository extends JpaRepository<Lesson, Integer> {

    List<Lesson> findByUnitIdOrderByPosition(Integer unitId);

    List<Lesson> findByTypeOrderByPosition(String type);

    @Query("SELECT l FROM Lesson l LEFT JOIN FETCH l.problems WHERE l.id = :id")
    Optional<Lesson> findByIdWithProblems(@Param("id") Integer id);

    @Query("SELECT l FROM Lesson l WHERE l.unit.id = :unitId ORDER BY l.position")
    List<Lesson> findAllByUnitIdOrderedByPosition(@Param("unitId") Integer unitId);

    @Query("SELECT COUNT(l) FROM Lesson l WHERE l.unit.id = :unitId")
    Long countLessonsByUnitId(@Param("unitId") Integer unitId);
}

================================================================================
📄 CONTENIDO DE: repository\ModuleRepository.java
================================================================================
package tic.BugHunter.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import java.util.List;
import tic.BugHunter.model.Module;
import java.util.Optional;

@Repository
public interface ModuleRepository extends JpaRepository<Module, Integer> {

    Optional<Module> findByCode(String code);

    @Query("SELECT m FROM Module m LEFT JOIN FETCH m.units WHERE m.id = :id")
    Optional<Module> findByIdWithUnits(Integer id);

    @Query("SELECT m FROM Module m ORDER BY m.id")
    List<Module> findAllOrderedById();

    boolean existsByCode(String code);
}


================================================================================
📄 CONTENIDO DE: repository\ProblemRepository.java
================================================================================
package tic.BugHunter.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import tic.BugHunter.model.Problem;

import java.util.List;

@Repository
public interface ProblemRepository extends JpaRepository<Problem, Integer> {

    List<Problem> findByLessonIdOrderByPosition(Integer lessonId);

    List<Problem> findByTypeOrderByPosition(String type);

    @Query("SELECT p FROM Problem p WHERE p.lesson.id = :lessonId ORDER BY p.position")
    List<Problem> findAllByLessonIdOrderedByPosition(@Param("lessonId") Integer lessonId);

    @Query("SELECT COUNT(p) FROM Problem p WHERE p.lesson.id = :lessonId")
    Long countProblemsByLessonId(@Param("lessonId") Integer lessonId);
}

================================================================================
📄 CONTENIDO DE: repository\UnitRepository.java
================================================================================
package tic.BugHunter.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import tic.BugHunter.model.Unit;

import java.util.List;
import java.util.Optional;

@Repository
public interface UnitRepository extends JpaRepository<Unit, Integer> {

    List<Unit> findByModuleIdOrderByUnitNumber(Integer moduleId);

    Optional<Unit> findByModuleIdAndUnitNumber(Integer moduleId, Integer unitNumber);

    @Query("SELECT u FROM Unit u LEFT JOIN FETCH u.lessons WHERE u.id = :id")
    Optional<Unit> findByIdWithLessons(@Param("id") Integer id);

    @Query("SELECT u FROM Unit u WHERE u.module.id = :moduleId ORDER BY u.unitNumber")
    List<Unit> findAllByModuleIdOrderedByUnitNumber(@Param("moduleId") Integer moduleId);
}

================================================================================
📄 CONTENIDO DE: repository\UserLessonProgressRepository.java
================================================================================
package tic.BugHunter.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import tic.BugHunter.model.UserLessonProgress;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface UserLessonProgressRepository extends JpaRepository<UserLessonProgress, UserLessonProgress.UserLessonProgressId> {

    List<UserLessonProgress> findByUserId(UUID userId);

    Optional<UserLessonProgress> findByUserIdAndLessonId(UUID userId, Integer lessonId);

    boolean existsByUserIdAndLessonId(UUID userId, Integer lessonId);

    @Query("SELECT ulp FROM UserLessonProgress ulp WHERE ulp.userId = :userId ORDER BY ulp.completedAt DESC")
    List<UserLessonProgress> findByUserIdOrderByCompletedAtDesc(@Param("userId") UUID userId);

    @Query("SELECT COUNT(ulp) FROM UserLessonProgress ulp WHERE ulp.userId = :userId")
    Long countCompletedLessonsByUserId(@Param("userId") UUID userId);

    @Query("SELECT ulp FROM UserLessonProgress ulp WHERE ulp.userId = :userId AND ulp.lesson.unit.module.id = :moduleId")
    List<UserLessonProgress> findByUserIdAndModuleId(@Param("userId") UUID userId, @Param("moduleId") Integer moduleId);
}


================================================================================
📄 CONTENIDO DE: repository\UserProfileRepository.java
================================================================================
package tic.BugHunter.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import tic.BugHunter.model.UserProfile;

import java.util.UUID;

@Repository
public interface UserProfileRepository extends JpaRepository<UserProfile, UUID> {
    // Métodos personalizados si los necesitas en el futuro
}

================================================================================
📄 CONTENIDO DE: repository\UserRepository.java
================================================================================
package tic.BugHunter.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import tic.BugHunter.model.User;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface UserRepository extends JpaRepository<User, UUID> {

    Optional<User> findByUsername(String username);

    Optional<User> findByEmail(String email);

    boolean existsByUsername(String username);

    boolean existsByEmail(String email);
}

================================================================================
📄 CONTENIDO DE: repository\UserStreakRepository.java
================================================================================
package tic.BugHunter.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import tic.BugHunter.model.UserStreak;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface UserStreakRepository extends JpaRepository<UserStreak, UserStreak.UserStreakId> {

    List<UserStreak> findByUserIdOrderByActivityDateDesc(UUID userId);

    Optional<UserStreak> findByUserIdAndActivityDate(UUID userId, LocalDate activityDate);

    boolean existsByUserIdAndActivityDate(UUID userId, LocalDate activityDate);

    @Query("SELECT us FROM UserStreak us WHERE us.userId = :userId AND us.activityDate BETWEEN :startDate AND :endDate ORDER BY us.activityDate")
    List<UserStreak> findByUserIdAndDateRange(@Param("userId") UUID userId,
                                              @Param("startDate") LocalDate startDate,
                                              @Param("endDate") LocalDate endDate);

    @Query("SELECT COUNT(us) FROM UserStreak us WHERE us.userId = :userId")
    Long countStreakDaysByUserId(@Param("userId") UUID userId);

    @Query(value = """
        WITH RECURSIVE streak_cte AS (
            SELECT activity_date, 1 as streak_length
            FROM user_streaks
            WHERE user_id = :userId
            AND activity_date = :currentDate
            
            UNION ALL
            
            SELECT us.activity_date, sc.streak_length + 1
            FROM user_streaks us
            INNER JOIN streak_cte sc ON us.activity_date = sc.activity_date - INTERVAL '1 day'
            WHERE us.user_id = :userId
        )
        SELECT MAX(streak_length) FROM streak_cte
        """, nativeQuery = true)
    Long calculateCurrentStreak(@Param("userId") UUID userId, @Param("currentDate") LocalDate currentDate);
}

================================================================================
📄 CONTENIDO DE: repository\UserXpHistoryRepository.java
================================================================================
package tic.BugHunter.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import tic.BugHunter.model.UserXpHistory;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.UUID;

@Repository
public interface UserXpHistoryRepository extends JpaRepository<UserXpHistory, Long> {

    List<UserXpHistory> findByUserIdOrderByCreatedAtDesc(UUID userId);

    List<UserXpHistory> findByUserIdAndSourceType(UUID userId, String sourceType);

    @Query("SELECT SUM(uxh.xpEarned) FROM UserXpHistory uxh WHERE uxh.user.id = :userId")
    Long sumXpByUserId(@Param("userId") UUID userId);

    @Query("SELECT SUM(uxh.xpEarned) FROM UserXpHistory uxh WHERE uxh.user.id = :userId AND uxh.createdAt >= :startDate")
    Long sumXpByUserIdSinceDate(@Param("userId") UUID userId, @Param("startDate") ZonedDateTime startDate);

    @Query("SELECT uxh FROM UserXpHistory uxh WHERE uxh.user.id = :userId AND uxh.createdAt BETWEEN :startDate AND :endDate ORDER BY uxh.createdAt DESC")
    List<UserXpHistory> findByUserIdAndDateRange(@Param("userId") UUID userId,
                                                 @Param("startDate") ZonedDateTime startDate,
                                                 @Param("endDate") ZonedDateTime endDate);
}

================================================================================
📄 CONTENIDO DE: service\UserService.java
================================================================================
package tic.BugHunter.service;

import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tic.BugHunter.dto.UserLoginDTO;
import tic.BugHunter.dto.UserRegistrationDTO;
import tic.BugHunter.model.User;
import tic.BugHunter.model.UserProfile;
import tic.BugHunter.repository.UserProfileRepository;
import tic.BugHunter.repository.UserRepository;

import java.util.UUID;

@Service
@RequiredArgsConstructor
@Transactional
public class UserService {

    private final UserRepository userRepository;
    private final UserProfileRepository userProfileRepository;
    private final PasswordEncoder passwordEncoder;

    public void registerUser(UserRegistrationDTO registrationDTO) {
        if (userRepository.existsByUsername(registrationDTO.username())) {
            throw new IllegalArgumentException("Username already exists");
        }

        if (userRepository.existsByEmail(registrationDTO.email())) {
            throw new IllegalArgumentException("Email already exists");
        }

        User user = User.builder()
                .username(registrationDTO.username())
                .name(registrationDTO.name())
                .email(registrationDTO.email())
                .passwordHash(passwordEncoder.encode(registrationDTO.password()))
                .build();

        User savedUser = userRepository.save(user);

        UserProfile userProfile = UserProfile.builder()
                .user(savedUser)
                .userId(savedUser.getId())
                .lingots(0)
                .dailyXpGoal(10)
                .soundEffectsEnabled(true)
                .build();

        userProfileRepository.save(userProfile);
    }

    public AuthResponseDTO loginUser(UserLoginDTO loginDTO) {
        User user = userRepository.findByEmail(loginDTO.emailOrUsername())
                .or(() -> userRepository.findByUsername(loginDTO.emailOrUsername()))
                .orElseThrow(() -> new IllegalArgumentException("Invalid credentials"));

        if (!passwordEncoder.matches(loginDTO.password(), user.getPasswordHash())) {
            throw new IllegalArgumentException("Invalid credentials");
        }

        String token = UUID.randomUUID().toString();

        return new AuthResponseDTO(
                token,
                new UserInfoDTO(
                        user.getId(),
                        user.getUsername(),
                        user.getName(),
                        user.getEmail()
                )
        );
    }
}